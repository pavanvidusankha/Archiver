'use strict'
resources = require('./resources')
fs = require('fs')
path = require('path')
rimraf = require('rimraf')
module.exports =
  process: (obj, archiveDir, tempDir) ->
    dir = obj.inputDir
    format = obj.fileNameFormat
    #set date format
    compressKeep = obj.compressKeep
    #wanted days to keep records
    delKeep = obj.deleteKeep
    oId = obj.id
    method = obj.opMethod
    #cleaning the temp directory
    @clean_temp tempDir

    ### "c"- compress "m"-  compress & delete  "d"-delete ###

    switch method
      when 'compress'
        @validatefiles dir, tempDir, format, compressKeep, 'm'
        resources.compress archiveDir, tempDir, oId, format
        @clean_temp tempDir
      when 'compress_del'
        comp_dir = path.resolve(archiveDir + '/' + oId)
        @validatefiles dir, tempDir, format, compressKeep, 'm'
        resources.compress archiveDir, tempDir, oId, format
        @delete_compressed comp_dir, delKeep
        @clean_temp tempDir
      when 'delete'
        @validatefiles dir, tempDir, format, compressKeep, 'd'
      else
        console.log 'Invalid method'
    return
  validatefiles: (dir, tempDir, format, kdays, status) ->

    traverseDir = (dir, kdays) ->
      fs.readdirSync(dir).forEach (file) ->
        source = path.join(dir, file)
        if format == 'epoch'
          if fs.lstatSync(source).isDirectory()
            traverseDir source, kdays
          else
            subd = file.substring(0, file.lastIndexOf('-'))
            dest = path.resolve(tempDir + '/' + subd + '/' + file)
            if resources.validate(file, format, kdays)
              resources.executeFile source, dest, status
        else if format == 'date' or format == 'datetime'
          _dest = path.resolve(tempDir + '/' + file)
          if resources.validate(file, format, kdays)
            resources.executeFile source, _dest, status
        return
      return

    traverseDir dir, kdays
    return
  delete_compressed: (comp_dir, delKeep) ->
    fs.readdirSync(comp_dir).forEach (file) ->
      fullPath = path.join(comp_dir, file + '/')
      if fs.lstatSync(fullPath).isDirectory()
        if resources.validate(file, 'date', delKeep)
          resources.executeFile fullPath, null, 'd'
      return
    return
  clean_temp: (dir) ->
    rimraf.sync path.resolve(dir + '*')
    console.log 'cleaned temp folder'
    return

# ---
# generated by js2coffee 2.2.0